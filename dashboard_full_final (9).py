
# Edz√©sterhel√©s Dashboard ‚Äì V√©gs≈ë, komplex verzi√≥
# Funkci√≥k: benchmark, t√∂bb j√°t√©kos, t√≠pus, trend, pizzadiagram, adatt√°rol√°s, focis design

import streamlit as st
import pandas as pd
import plotly.express as px
import os

st.set_page_config(page_title="‚öΩ Edz√©sterhel√©s Dashboard", layout="wide")

st.title("‚öΩ Edz√©sterhel√©s ‚Äì Interakt√≠v Elemz≈ë Rendszer")
st.markdown("**T√∂bb heti adat, j√°t√©kos- √©s t√≠pus sz≈±r√©s, benchmark √©s csapat √∂sszevet√©s, trendek, pizzadiagramok**")

DATA_FILE = "saved_data.csv"

@st.cache_data
def load_excel(file):
    xls = pd.ExcelFile(file)
    all_sheets = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df["H√©t"] = sheet
        all_sheets.append(df)
    return pd.concat(all_sheets, ignore_index=True)

def normalize_series(s):
    return (s - s.min()) / (s.max() - s.min()) * 100 if s.max() != s.min() else s

def save_data(df):
    df.to_csv(DATA_FILE, index=False)

def load_saved_data():
    if os.path.exists(DATA_FILE):
        return pd.read_csv(DATA_FILE)
    return pd.DataFrame()

def append_data(new_df, saved_df):
    combined = pd.concat([saved_df, new_df], ignore_index=True)
    combined.drop_duplicates(inplace=True)
    return combined

uploaded_file = st.file_uploader("üì• Heti Excel felt√∂lt√©se", type="xlsx")

if uploaded_file:
    df_new = load_excel(uploaded_file)
    df_old = load_saved_data()
    df_all = append_data(df_new, df_old)
    save_data(df_all)
else:
    df_all = load_saved_data()

if not df_all.empty:
    df_all = df_all[df_all["J√°t√©kos neve"].notna()]
    mutatok = [c for c in df_all.columns if df_all[c].dtype in ["float64", "int64"] and c not in ["Kor", "√âvfolyam"]]
    all_players = sorted(df_all["J√°t√©kos neve"].dropna().unique())
    all_types = sorted(df_all["T√≠pus"].dropna().unique())
    all_weeks = sorted(df_all["H√©t"].dropna().unique())

    st.sidebar.header("üéõ Sz≈±r≈ëk")
    selected_players = st.sidebar.multiselect("J√°t√©kos(ok)", all_players, default=all_players[:1])
    selected_type = st.sidebar.selectbox("T√≠pus", ["√ñsszes"] + all_types)
    selected_weeks = st.sidebar.multiselect("Hetek", all_weeks, default=all_weeks)
    selected_metrics = st.sidebar.multiselect("Mutat√≥k", mutatok)

    df_filtered = df_all[df_all["J√°t√©kos neve"].isin(selected_players)]
    if selected_type != "√ñsszes":
        df_filtered = df_filtered[df_filtered["T√≠pus"] == selected_type]
    df_filtered = df_filtered[df_filtered["H√©t"].isin(selected_weeks)]

    df_team = df_all[df_all["H√©t"].isin(selected_weeks)]
    if selected_type != "√ñsszes":
        df_team = df_team[df_team["T√≠pus"] == selected_type]

    benchmark_ref = {
        "Teljes t√°v [m]": 5500,
        "T√°v/perc [m/perc]": 100,
        "Max sebess√©g [km/h]": 30,
        "Sprintek sz√°ma": 25,
        "Izomterhel√©s": 65,
        "HRV (RMSSD)": 60,
        "√Åtlagos pulzus [bpm]": 160,
        "Z√≥na 5-6 t√°v": 500,
        "Z√≥na 5 gyorsul√°s": 10,
        "Z√≥na 5 lassul√°s": 10
    }

    st.header("üìä √ñsszehasonl√≠t√≥ diagram: J√°t√©kos(ok) vs Csapat vs Benchmark")
    if selected_metrics:
        summary = []
        for mut in selected_metrics:
            summary.append({
                "Mutat√≥": mut,
                "J√°t√©kos": df_filtered[mut].mean(),
                "Csapat": df_team[mut].mean(),
                "Benchmark": benchmark_ref.get(mut)
            })
        df_summary = pd.DataFrame(summary)
        st.plotly_chart(px.bar(df_summary, x="Mutat√≥", y=["J√°t√©kos", "Csapat", "Benchmark"], barmode="group"), use_container_width=True)

    st.header("üçï Pizzadiagram(ok)")
    for player in selected_players:
        st.subheader(f"{player}")
        df_p = df_filtered[df_filtered["J√°t√©kos neve"] == player]
        if not df_p.empty and selected_metrics:
            pizza_df = df_p[selected_metrics].mean().dropna().reset_index()
            pizza_df.columns = ["Mutat√≥", "√ârt√©k"]
            pizza_df["Benchmark"] = pizza_df["Mutat√≥"].map(benchmark_ref)
            pizza_df["% Benchmark"] = pizza_df["√ârt√©k"] / pizza_df["Benchmark"] * 100
            fig = px.bar_polar(pizza_df, r="% Benchmark", theta="Mutat√≥", color="% Benchmark",
                               range_r=[0, 120], title=f"{player} ‚Äì Pizzadiagram (% Benchmark)",
                               color_continuous_scale="viridis")
            st.plotly_chart(fig, use_container_width=True)

    st.header("üìà Trend (normaliz√°lt)")
    trend_df = df_filtered.groupby(["H√©t"])[selected_metrics].mean().reset_index()
    for m in selected_metrics:
        if m in trend_df.columns:
            trend_df[m] = normalize_series(trend_df[m])
    st.plotly_chart(px.line(trend_df, x="H√©t", y=selected_metrics, markers=True), use_container_width=True)

    st.header("üìã Benchmark t√°bl√°zat √©s ar√°nyok")
    table_data = []
    for mut in selected_metrics:
        bench = benchmark_ref.get(mut)
        actual = df_filtered[mut].mean()
        ratio = actual / bench * 100 if bench else None
        table_data.append({
            "Mutat√≥": mut,
            "Benchmark √©rt√©k": bench,
            "√Åtlagos √©rt√©k": actual,
            "Elt√©r√©s (%)": ratio
        })
    st.dataframe(pd.DataFrame(table_data))

    st.header("üìÇ Sz≈±rt adatt√°bla")
    st.dataframe(df_filtered[selected_metrics + ["J√°t√©kos neve", "H√©t", "T√≠pus"]] if selected_metrics else df_filtered)
else:
    st.info("üì• T√∂lts fel legal√°bb egy heti adatot (Excel) a kezd√©shez.")
