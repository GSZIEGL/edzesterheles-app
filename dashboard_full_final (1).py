
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="V√©gs≈ë Edz√©sterhel√©s Dashboard", layout="wide")
st.title("üìä Edz√©sterhel√©s √©s Meccsterhel√©s ‚Äì Teljes Dashboard")

uploaded_file = st.file_uploader("üì§ T√∂lts fel egy Excel f√°jlt (6 sheet: 5 edz√©s + 1 meccs)", type="xlsx")

@st.cache_data
def load_data(file):
    xls = pd.ExcelFile(file)
    dfs = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df["Forr√°s"] = sheet
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

def normalize(val, ref):
    return val / ref * 100 if ref else 0

if uploaded_file:
    df = load_data(uploaded_file)
    df = df[df["J√°t√©kos neve"].notna()]
    st.sidebar.header("üéØ Sz≈±r√©s")
    player = st.sidebar.selectbox("J√°t√©kos kiv√°laszt√°sa", df["J√°t√©kos neve"].unique())
    tipusok = df["T√≠pus"].dropna().unique().tolist()
    tipus = st.sidebar.selectbox("T√≠pus sz≈±r√©s", ["√ñsszes"] + tipusok)
    if tipus != "√ñsszes":
        df = df[df["T√≠pus"] == tipus]
    df_player = df[df["J√°t√©kos neve"] == player]

    mutatok = [
        "Teljes t√°v [m]",
        "T√°v/perc [m/perc]",
        "Max sebess√©g [km/h]",
        "Sprintek sz√°ma",
        "Z√≥na 5 gyorsul√°s",
        "Z√≥na 5 lassul√°s",
        "Z√≥na 5-6 t√°v",
        "Izomterhel√©s",
        "HRV (RMSSD)",
        "√Åtlagos pulzus [bpm]"
    ]
    ref = {
        "Teljes t√°v [m]": 5500,
        "T√°v/perc [m/perc]": 100,
        "Max sebess√©g [km/h]": 30,
        "Sprintek sz√°ma": 25,
        "Z√≥na 5 gyorsul√°s": 10,
        "Z√≥na 5 lassul√°s": 10,
        "Z√≥na 5-6 t√°v": 500,
        "Izomterhel√©s": 65,
        "HRV (RMSSD)": 60,
        "√Åtlagos pulzus [bpm]": 160
    }

    available = [m for m in mutatok if m in df_player.columns]
    if available:
        st.subheader("üï∏Ô∏è P√≥kh√°l√≥ ‚Äì J√°t√©kos vs Benchmark")
        avg_vals = df_player[available].mean()
        scaled = [normalize(avg_vals[m], ref[m]) for m in available]
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(r=scaled, theta=available, fill='toself', name=player))
        fig.add_trace(go.Scatterpolar(r=[100]*len(scaled), theta=available, fill='toself', name='Ipar√°gi √°tlag'))
        fig.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, max(120, max(scaled))])))
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üèÉ‚Äç‚ôÇÔ∏è Sprintek √©s Max Sebess√©g")
    if "Sprintek sz√°ma" in df_player.columns:
        fig2 = px.bar(df_player, x="Forr√°s", y="Sprintek sz√°ma", color="Max sebess√©g [km/h]")
        st.plotly_chart(fig2, use_container_width=True)

    st.subheader("üì¶ Z√≥na √©s Izomterhel√©s")
    zones = ["Z√≥na 5 gyorsul√°s", "Z√≥na 5 lassul√°s", "Z√≥na 5-6 t√°v", "Izomterhel√©s"]
    valid_zones = [z for z in zones if z in df_player.columns]
    if valid_zones:
        fig3 = px.bar(df_player, x="Forr√°s", y=valid_zones, barmode="group")
        st.plotly_chart(fig3, use_container_width=True)

    st.subheader("üèÜ Top10 Izomterhel√©s")
    if "Izomterhel√©s" in df.columns:
        top10 = df.groupby("J√°t√©kos neve")["Izomterhel√©s"].mean().sort_values(ascending=False).head(10).reset_index()
        fig4 = px.bar(top10, x="Izomterhel√©s", y="J√°t√©kos neve", orientation="h")
        st.plotly_chart(fig4, use_container_width=True)

else:
    st.info("T√∂lts fel egy struktur√°lt Excel f√°jlt az elemz√©shez.")
