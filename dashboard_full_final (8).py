
# Edz√©sterhel√©s App ‚Äì V√©gleges verzi√≥
# Funkci√≥k: t√∂bb j√°t√©kos, pizza, benchmark, trend, t√≠pus, heti √∂sszehasonl√≠t√°s, t√°rolt adatok, focis design

import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="‚öΩ Edz√©sterhel√©s Dashboard", layout="wide")

st.markdown("## ‚öΩ Edz√©sterhel√©s ‚Äì Komplex Elemz≈ë Rendszer")
st.markdown("Interakt√≠v elemz√©s j√°t√©kosok, hetek √©s mutat√≥k szerint, benchmarkkal √©s csapat√°tlaggal √∂sszevetve.")

if "df_all" not in st.session_state:
    st.session_state["df_all"] = pd.DataFrame()

uploaded_file = st.file_uploader("üì• √öj heti adat felt√∂lt√©se (Excel, k√ºl√∂n munkalapok)", type="xlsx")

@st.cache_data
def load_excel(file):
    xls = pd.ExcelFile(file)
    all_sheets = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df["H√©t"] = sheet
        all_sheets.append(df)
    return pd.concat(all_sheets, ignore_index=True)

def normalize_series(s):
    return (s - s.min()) / (s.max() - s.min()) * 100 if s.max() != s.min() else s

def add_to_session(df_new):
    if not st.session_state["df_all"].empty:
        st.session_state["df_all"] = pd.concat([st.session_state["df_all"], df_new], ignore_index=True)
    else:
        st.session_state["df_all"] = df_new

if uploaded_file:
    df_new = load_excel(uploaded_file)
    add_to_session(df_new)

df = st.session_state["df_all"]

if not df.empty:
    df = df[df["J√°t√©kos neve"].notna()]
    all_metrics = [c for c in df.columns if df[c].dtype in ["float64", "int64"] and c not in ["Kor", "√âvfolyam"]]
    all_players = sorted(df["J√°t√©kos neve"].dropna().unique().tolist())
    all_types = sorted(df["T√≠pus"].dropna().unique().tolist())
    all_weeks = sorted(df["H√©t"].dropna().unique().tolist())

    st.sidebar.header("üéõ Sz≈±r≈ëpanel")

    with st.sidebar.expander("üßç‚Äç‚ôÇÔ∏è J√°t√©kosok"):
        selected_players = st.multiselect("V√°lassz j√°t√©kosokat", all_players, default=all_players[:1])

    with st.sidebar.expander("üè∑ T√≠pus √©s H√©t"):
        selected_type = st.selectbox("T√≠pus", ["√ñsszes"] + all_types)
        selected_weeks = st.multiselect("Hetek", all_weeks, default=all_weeks)

    with st.sidebar.expander("üìä Mutat√≥k"):
        selected_metrics = st.multiselect("Mutat√≥k", all_metrics)

    df_filtered = df[df["J√°t√©kos neve"].isin(selected_players)]
    if selected_type != "√ñsszes":
        df_filtered = df_filtered[df_filtered["T√≠pus"] == selected_type]
    df_filtered = df_filtered[df_filtered["H√©t"].isin(selected_weeks)]

    df_team = df[df["H√©t"].isin(selected_weeks)]
    if selected_type != "√ñsszes":
        df_team = df_team[df_team["T√≠pus"] == selected_type]

    st.markdown("### üìä √ñsszehasonl√≠t√°s ‚Äì j√°t√©kos vs csapat vs benchmark")

    ref_values = {
        "Teljes t√°v [m]": 5500,
        "T√°v/perc [m/perc]": 100,
        "Max sebess√©g [km/h]": 30,
        "Sprintek sz√°ma": 25,
        "Izomterhel√©s": 65,
        "HRV (RMSSD)": 60,
        "√Åtlagos pulzus [bpm]": 160,
        "Z√≥na 5-6 t√°v": 500,
        "Z√≥na 5 gyorsul√°s": 10,
        "Z√≥na 5 lassul√°s": 10
    }

    if selected_metrics:
        chart_data = []
        for mut in selected_metrics:
            chart_data.append({
                "Mutat√≥": mut,
                "J√°t√©kos": df_filtered[mut].mean() if mut in df_filtered else None,
                "Csapat": df_team[mut].mean() if mut in df_team else None,
                "Benchmark": ref_values.get(mut, None)
            })
        comp_df = pd.DataFrame(chart_data)
        fig_bar = px.bar(comp_df, x="Mutat√≥", y=["J√°t√©kos", "Csapat", "Benchmark"], barmode="group")
        st.plotly_chart(fig_bar, use_container_width=True)

        st.markdown("### üçï Pizzadiagram(ok)")
        for player in selected_players:
            df_p = df_filtered[df_filtered["J√°t√©kos neve"] == player]
            if df_p.empty:
                continue
            pizza_df = df_p[selected_metrics].mean().dropna().reset_index()
            pizza_df.columns = ["Mutat√≥", "√ârt√©k"]
            pizza_df["Benchmark"] = pizza_df["Mutat√≥"].map(ref_values)
            fig_pizza = px.bar_polar(pizza_df, r="√ârt√©k", theta="Mutat√≥", title=f"{player} pizza diagram", range_r=[0, pizza_df["Benchmark"].max()*1.2])
            st.plotly_chart(fig_pizza, use_container_width=True)

        st.markdown("### üìà Normaliz√°lt trenddiagram (j√°t√©kosok √°tlaga)")
        df_trend = df_filtered.groupby(["H√©t"])[selected_metrics].mean().reset_index()
        for col in selected_metrics:
            if col in df_trend.columns:
                df_trend[col] = normalize_series(df_trend[col])
        fig_line = px.line(df_trend, x="H√©t", y=selected_metrics, markers=True, title="Normaliz√°lt trendmutat√≥k")
        st.plotly_chart(fig_line, use_container_width=True)

        st.markdown("### üìã Benchmark t√°bl√°zat")
        st.dataframe(pd.DataFrame.from_dict(ref_values, orient="index", columns=["Benchmark √©rt√©kek"]).reset_index().rename(columns={"index": "Mutat√≥"}))

    st.markdown("### üìÇ Sz≈±rt adatt√°bla")
    st.dataframe(df_filtered[selected_metrics + ["J√°t√©kos neve", "H√©t", "T√≠pus"]] if selected_metrics else df_filtered)
else:
    st.info("T√∂lts fel legal√°bb egy heti adatot az elemz√©shez.")
