
# ‚öΩ V11_fix ‚Äì Edz√©sterhel√©s Dashboard (benchmark, h√©t sz≈±r√©s, trend, jav√≠tott pizz√°k)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

st.set_page_config(page_title="Edz√©sterhel√©s V11_fix", layout="wide")
st.title("‚öΩ Edz√©sterhel√©s Dashboard ‚Äì V11 FIX")

BENCHMARK_ARANY = {
    "Teljes t√°v [m]": 2.5,
    "T√°v/perc [m/min]": 0.7,
    "T√°v z√≥na 4 [m]": 1.5,
    "T√°v z√≥na 5 [m]": 1.5,
    "Sprint sz√°m": 2.0,
    "Gyorsul√°sok sz√°ma": 1.5,
    "Lass√≠t√°sok sz√°ma": 1.5,
    "Izomterhel√©s": 2.5,
    "Edz√©sterhel√©s": 3.0,
    "Max sebess√©g [km/h]": 1.0
}

uploaded_files = st.file_uploader("üì• Excel f√°jl(ok) felt√∂lt√©se", type="xlsx", accept_multiple_files=True)
if uploaded_files:
    dfs = []
    for file in uploaded_files:
        xls = pd.ExcelFile(file)
        for sheet in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet)
            df["H√©t"] = sheet
            df["T√≠pus"] = "Meccs" if "meccs" in sheet.lower() else "Edz√©s"
            dfs.append(df)
    data = pd.concat(dfs, ignore_index=True)

    players = sorted(data["J√°t√©kos neve"].dropna().unique())
    weeks = sorted(data["H√©t"].unique())
    numeric_cols = data.select_dtypes(include="number").columns
    metrics = [col for col in numeric_cols if col in BENCHMARK_ARANY]

    st.sidebar.header("üéõ Sz≈±r√©s")
    selected_players = st.sidebar.multiselect("J√°t√©kos(ok)", players, default=players)
    selected_weeks = st.sidebar.multiselect("H√©t(ek)", weeks, default=weeks)
    selected_metrics = st.sidebar.multiselect("Mutat√≥k", metrics, default=metrics[:6])
    tipus = st.sidebar.radio("T√≠pus", ["Mindkett≈ë", "Edz√©s", "Meccs"])

    df = data[data["H√©t"].isin(selected_weeks)]
    if tipus != "Mindkett≈ë":
        df = df[df["T√≠pus"] == tipus]

    if not df.empty and selected_metrics:
        st.subheader("üìä Egy√©ni vs Csapat vs Benchmark (oszlop + vonal)")
        for metric in selected_metrics:
            csapat_meccs = df[df["T√≠pus"] == "Meccs"][metric].mean()
            benchmark_val = BENCHMARK_ARANY.get(metric, 1.0) * csapat_meccs if not np.isnan(csapat_meccs) else None
            csapat_avg = df[metric].mean()
            chart_data = []
            for player in selected_players:
                val = df[df["J√°t√©kos neve"] == player][metric].mean()
                chart_data.append({
                    "T√≠pus": "J√°t√©kos",
                    "J√°t√©kos": player,
                    "Mutat√≥": metric,
                    "√ârt√©k": val
                })
            chart_data.append({"T√≠pus": "Csapat√°tlag", "J√°t√©kos": "Csapat√°tlag", "Mutat√≥": metric, "√ârt√©k": csapat_avg})
            if benchmark_val is not None:
                chart_data.append({"T√≠pus": "Benchmark", "J√°t√©kos": "Benchmark", "Mutat√≥": metric, "√ârt√©k": benchmark_val})
            df_plot = pd.DataFrame(chart_data)
            fig = px.bar(df_plot, x="J√°t√©kos", y="√ârt√©k", color="T√≠pus", title=f"{metric} √∂sszehasonl√≠t√°sa")
            st.plotly_chart(fig, use_container_width=True)

        st.subheader("üçï Pizzadiagram ‚Äì Edz√©s √©s Meccs")
        for tipus_val in ["Edz√©s", "Meccs"]:
            pizza_df = df[df["T√≠pus"] == tipus_val]
            if not pizza_df.empty:
                max_val = pizza_df[selected_metrics].max().max()
                fig = px.line_polar(r=[], theta=[], line_close=True, title=f"{tipus_val} Pizza")
                for player in selected_players:
                    avg = pizza_df[pizza_df["J√°t√©kos neve"] == player][selected_metrics].mean()
                    if not avg.isnull().all():
                        fig.add_scatterpolar(r=avg.values / max_val * 100, theta=avg.index, fill='toself', name=player)
                team_avg = pizza_df[selected_metrics].mean()
                fig.add_scatterpolar(r=team_avg.values / max_val * 100, theta=team_avg.index, fill='toself', name="Csapat√°tlag")
                meccs_df = df[df["T√≠pus"] == "Meccs"]
                ref = [BENCHMARK_ARANY.get(m, 1.0) * meccs_df[m].mean() / max_val * 100 if not np.isnan(meccs_df[m].mean()) else 0 for m in selected_metrics]
                fig.add_scatterpolar(r=ref, theta=selected_metrics, name="Benchmark", line=dict(dash="dot"))
                st.plotly_chart(fig, use_container_width=True)

        st.subheader("üìà Trend ‚Äì j√°t√©kosok, csapat√°tlag, benchmark")
        for metric in selected_metrics:
            trend_df = df[df["J√°t√©kos neve"].isin(selected_players)]
            if not trend_df.empty:
                pivot = trend_df.pivot_table(index="H√©t", columns="J√°t√©kos neve", values=metric, aggfunc="mean").reset_index()
                fig = px.line(pivot, x="H√©t", y=pivot.columns[1:], title=f"{metric} ‚Äì Trend")
                cs_avg = df.groupby("H√©t")[metric].mean().reset_index()
                fig.add_scatter(x=cs_avg["H√©t"], y=cs_avg[metric], mode="lines+markers", name="Csapat√°tlag")
                meccs_df = df[df["T√≠pus"] == "Meccs"].groupby("H√©t")[metric].mean()
                bench = [BENCHMARK_ARANY.get(metric, 1.0) * v if not np.isnan(v) else None for v in meccs_df]
                fig.add_scatter(x=meccs_df.index, y=bench, mode="lines", name="Benchmark", line=dict(dash="dot"))
                st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üì• T√∂lts fel legal√°bb egy heti Excel-f√°jlt a kezd√©shez.")
