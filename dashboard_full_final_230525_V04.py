
# ‚öΩ V√©gleges edz√©sterhel√©s dashboard V04 ‚Äì benchmark, pizzab≈ëv√≠t√©s, trend j√°t√©kosonk√©nt
import streamlit as st
import pandas as pd
import plotly.express as px
import os

st.set_page_config(page_title="‚öΩ Edz√©sterhel√©s Dashboard", layout="wide")
st.title("‚öΩ Edz√©sterhel√©s ‚Äì Teljes Elemz≈ë Rendszer (V04)")

DATA_FILE = "saved_data.csv"

@st.cache_data
def load_excel(file):
    xls = pd.ExcelFile(file)
    all_sheets = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df["H√©t"] = sheet
        all_sheets.append(df)
    return pd.concat(all_sheets, ignore_index=True)

def save_data(df):
    df.to_csv(DATA_FILE, index=False)

def load_saved_data():
    if os.path.exists(DATA_FILE):
        return pd.read_csv(DATA_FILE)
    return pd.DataFrame()

def append_data(new_df, saved_df):
    combined = pd.concat([saved_df, new_df], ignore_index=True)
    combined.drop_duplicates(inplace=True)
    return combined

def normalize_series(s):
    return (s - s.min()) / (s.max() - s.min()) * 100 if s.max() != s.min() else s

benchmark_nominal = {
    "Teljes t√°v [m]": 6000,
    "T√°v/perc [m/perc]": 115,
    "Max sebess√©g [km/h]": 29,
    "Sprintek sz√°ma": 20,
    "Izomterhel√©s": 75,
    "HRV (RMSSD)": 65,
    "√Åtlagos pulzus [bpm]": 158,
    "Z√≥na 5-6 t√°v": 500,
    "Z√≥na 5 gyorsul√°s": 12,
    "Z√≥na 5 lassul√°s": 11
}
benchmark_relative = {
    "Teljes t√°v [m]": 2.5,
    "T√°v/perc [m/perc]": 0.7,
    "Z√≥na 4-5 t√°v": 1.5
}

uploaded_file = st.file_uploader("üì• Heti Excel felt√∂lt√©se", type="xlsx")

if uploaded_file:
    df_new = load_excel(uploaded_file)
    df_old = load_saved_data()
    df_all = append_data(df_new, df_old)
    save_data(df_all)
else:
    df_all = load_saved_data()

if not df_all.empty:
    df_all = df_all[df_all["J√°t√©kos neve"].notna()]
    mutatok = [c for c in df_all.columns if df_all[c].dtype in ["float64", "int64"] and c not in ["Kor", "√âvfolyam"]]
    all_players = sorted(df_all["J√°t√©kos neve"].dropna().unique())
    all_types = sorted(df_all["T√≠pus"].dropna().unique())
    all_weeks = sorted(df_all["H√©t"].dropna().unique())

    st.sidebar.header("üéõ Sz≈±r≈ëk")
    selected_players = st.sidebar.multiselect("J√°t√©kos(ok)", all_players, default=all_players[:1])
    selected_type = st.sidebar.selectbox("T√≠pus", ["√ñsszes"] + all_types)
    selected_weeks = st.sidebar.multiselect("Hetek", all_weeks, default=all_weeks)
    selected_metrics = st.sidebar.multiselect("Mutat√≥k", mutatok)
    pizza_mode = st.sidebar.radio("Pizzadiagram m√≥d", ["Egy diagram t√∂bb j√°t√©kossal", "K√ºl√∂n pizz√°k j√°t√©kosonk√©nt"])
    show_team_avg = st.sidebar.checkbox("Mutasd a csapat√°tlagot a pizz√°n")
    show_benchmark = st.sidebar.checkbox("Mutasd a benchmarkot a pizz√°n")

    df_filtered = df_all[df_all["J√°t√©kos neve"].isin(selected_players)]
    if selected_type != "√ñsszes":
        df_filtered = df_filtered[df_filtered["T√≠pus"] == selected_type]
    df_filtered = df_filtered[df_filtered["H√©t"].isin(selected_weeks)]

    df_team = df_all[df_all["H√©t"].isin(selected_weeks)]
    if selected_type != "√ñsszes":
        df_team = df_team[df_team["T√≠pus"] == selected_type]

    st.header("üìä √ñsszehasonl√≠t√≥ diagram: J√°t√©kos(ok) vs Csapat vs Benchmark")
    if selected_metrics:
        summary = []
        for mut in selected_metrics:
            for player in selected_players:
                val = df_filtered[df_filtered["J√°t√©kos neve"] == player][mut].mean()
                summary.append({"Mutat√≥": mut, "N√©v": player, "√ârt√©k": val})
            summary.append({"Mutat√≥": mut, "N√©v": "Csapat√°tlag", "√ârt√©k": df_team[mut].mean()})
            summary.append({"Mutat√≥": mut, "N√©v": "Benchmark", "√ârt√©k": benchmark_nominal.get(mut)})
        df_summary = pd.DataFrame(summary)
        fig = px.bar(df_summary, x="Mutat√≥", y="√ârt√©k", color="N√©v", barmode="group")
        st.plotly_chart(fig, use_container_width=True)

    st.header("üçï Pizzadiagram(ok)")
    pizza_data = []
    for player in selected_players:
        df_p = df_filtered[df_filtered["J√°t√©kos neve"] == player]
        if not df_p.empty:
            row = df_p[selected_metrics].mean().to_dict()
            row["J√°t√©kos"] = player
            pizza_data.append(row)

    if show_team_avg:
        team_row = df_team[selected_metrics].mean().to_dict()
        team_row["J√°t√©kos"] = "Csapat√°tlag"
        pizza_data.append(team_row)

    if show_benchmark:
        benchmark_row = {m: benchmark_nominal.get(m) for m in selected_metrics}
        benchmark_row["J√°t√©kos"] = "Benchmark"
        pizza_data.append(benchmark_row)

    df_pizza = pd.DataFrame(pizza_data)
    df_pizza = df_pizza.melt(id_vars="J√°t√©kos", var_name="Mutat√≥", value_name="√ârt√©k")

    if pizza_mode == "Egy diagram t√∂bb j√°t√©kossal":
        fig = px.line_polar(df_pizza, r="√ârt√©k", theta="Mutat√≥", color="J√°t√©kos", line_close=True, range_r=[0, df_pizza["√ârt√©k"].max()*1.1])
        st.plotly_chart(fig, use_container_width=True)
    else:
        for player in df_pizza["J√°t√©kos"].unique():
            st.subheader(f"{player}")
            subset = df_pizza[df_pizza["J√°t√©kos"] == player]
            fig = px.bar_polar(subset, r="√ârt√©k", theta="Mutat√≥", range_r=[0, subset["√ârt√©k"].max()*1.1], title=player)
            st.plotly_chart(fig, use_container_width=True)

    st.header("üìà Trenddiagramok (j√°t√©kosonk√©nt)")
    for player in selected_players:
        st.subheader(f"{player}")
        player_df = df_filtered[df_filtered["J√°t√©kos neve"] == player]
        if not player_df.empty:
            trend_df = player_df.groupby("H√©t")[selected_metrics].mean().reset_index()
            for m in selected_metrics:
                if m in trend_df.columns:
                    trend_df[m] = normalize_series(trend_df[m])
            fig = px.line(trend_df, x="H√©t", y=selected_metrics, markers=True, title=player)
            st.plotly_chart(fig, use_container_width=True)

    st.header("üìã Benchmark t√°bl√°zat √©s viszony√≠t√°s")
    bench_table = []
    for mut in selected_metrics:
        bench = benchmark_nominal.get(mut)
        edzes_avg = df_filtered[df_filtered["T√≠pus"] == "Edz√©s"][mut].mean()
        meccs_avg = df_filtered[df_filtered["T√≠pus"] == "Meccs"][mut].mean()
        if pd.notna(meccs_avg) and meccs_avg != 0:
            arany = edzes_avg / meccs_avg
        else:
            arany = None
        elvart = benchmark_relative.get(mut)
        teljesites = arany / elvart * 100 if elvart and arany else None
        bench_table.append({
            "Mutat√≥": mut,
            "Meccs √°tlag": meccs_avg,
            "Edz√©s √°tlag": edzes_avg,
            "Benchmark c√©l (meccs szorz√≥)": elvart,
            "T√©nyleges ar√°ny": arany,
            "Teljes√≠t√©s (%)": teljesites
        })
    st.dataframe(pd.DataFrame(bench_table))
else:
    st.info("üì• T√∂lts fel heti adatot az elemz√©shez (Excel f√°jl)")
