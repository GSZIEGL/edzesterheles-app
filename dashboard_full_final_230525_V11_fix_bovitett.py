
# ‚öΩ V11_fix_b≈ëv√≠tett ‚Äì √ñsszes mutat√≥, heti sz≈±r√©s, benchmark, trend, pizza, csapat√°tlag
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

st.set_page_config(page_title="Edz√©sterhel√©s V11_b≈ëv√≠tett", layout="wide")
st.title("‚öΩ Edz√©sterhel√©s ‚Äì V11 FIX (b≈ëv√≠tett)")

# Alap√©rtelmezett benchmark ar√°ny, ha nincs megadva konkr√©t √©rt√©k
ALAP_BENCHMARK_ARANY = 1.0
BENCHMARK_ARANY = {
    "Teljes t√°v [m]": 2.5,
    "T√°v/perc [m/min]": 0.7,
    "T√°v z√≥na 4 [m]": 1.5,
    "T√°v z√≥na 5 [m]": 1.5,
    "Sprint sz√°m": 2.0,
    "Gyorsul√°sok sz√°ma": 1.5,
    "Lass√≠t√°sok sz√°ma": 1.5,
    "Izomterhel√©s": 2.5,
    "Edz√©sterhel√©s": 3.0,
    "Max sebess√©g [km/h]": 1.0
}

uploaded_files = st.file_uploader("üì• Excel f√°jl(ok) felt√∂lt√©se", type="xlsx", accept_multiple_files=True)

if uploaded_files:
    dfs = []
    for file in uploaded_files:
        xls = pd.ExcelFile(file)
        for sheet in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet)
            df["H√©t"] = sheet
            df["T√≠pus"] = "Meccs" if "meccs" in sheet.lower() else "Edz√©s"
            dfs.append(df)
    data = pd.concat(dfs, ignore_index=True)

    players = sorted(data["J√°t√©kos neve"].dropna().unique())
    weeks = sorted(data["H√©t"].unique())
    numeric_cols = data.select_dtypes(include="number").columns
    metrics = sorted([col for col in numeric_cols if col not in ["√âvfolyam"]])  # minden sz√°mszer≈± oszlop megjelenik

    st.sidebar.header("üéõ Sz≈±r√©s")
    selected_players = st.sidebar.multiselect("J√°t√©kos(ok)", players, default=players)
    selected_weeks = st.sidebar.multiselect("H√©t(ek)", weeks, default=weeks)
    selected_metrics = st.sidebar.multiselect("Mutat√≥k", metrics, default=metrics[:5])
    tipus = st.sidebar.radio("T√≠pus", ["Mindkett≈ë", "Edz√©s", "Meccs"])

    df = data[data["H√©t"].isin(selected_weeks)]
    if tipus != "Mindkett≈ë":
        df = df[df["T√≠pus"] == tipus]

    if not df.empty and selected_metrics:
        st.subheader("üìä Egy√©ni vs Csapat vs Benchmark")
        for metric in selected_metrics:
            meccs_val = df[df["T√≠pus"] == "Meccs"][metric].mean()
            benchmark_szorz√≥ = BENCHMARK_ARANY.get(metric, ALAP_BENCHMARK_ARANY)
            benchmark = benchmark_szorz√≥ * meccs_val if not np.isnan(meccs_val) else None
            csapat_avg = df[metric].mean()
            chart_data = []
            for player in selected_players:
                val = df[df["J√°t√©kos neve"] == player][metric].mean()
                chart_data.append({"J√°t√©kos": player, "√ârt√©k": val, "T√≠pus": "J√°t√©kos"})
            chart_data.append({"J√°t√©kos": "Csapat√°tlag", "√ârt√©k": csapat_avg, "T√≠pus": "Csapat√°tlag"})
            if benchmark is not None:
                chart_data.append({"J√°t√©kos": "Benchmark", "√ârt√©k": benchmark, "T√≠pus": "Benchmark"})
            df_chart = pd.DataFrame(chart_data)
            fig = px.bar(df_chart, x="J√°t√©kos", y="√ârt√©k", color="T√≠pus", title=f"{metric} ‚Äì √∂sszehasonl√≠t√°s")
            st.plotly_chart(fig, use_container_width=True)

        st.subheader("üçï Pizza diagram ‚Äì Edz√©s & Meccs")
        for tipus_val in ["Edz√©s", "Meccs"]:
            pizza_df = df[df["T√≠pus"] == tipus_val]
            if not pizza_df.empty:
                max_val = pizza_df[selected_metrics].max().max()
                fig = px.line_polar(r=[], theta=[], line_close=True, title=f"{tipus_val} ‚Äì Pizza")
                for player in selected_players:
                    √°tlag = pizza_df[pizza_df["J√°t√©kos neve"] == player][selected_metrics].mean()
                    fig.add_scatterpolar(r=(√°tlag / max_val * 100).values, theta=√°tlag.index, fill='toself', name=player)
                csapat_√°tlag = pizza_df[selected_metrics].mean()
                fig.add_scatterpolar(r=(csapat_√°tlag / max_val * 100).values, theta=csapat_√°tlag.index, fill='toself', name="Csapat√°tlag")
                meccs_df = df[df["T√≠pus"] == "Meccs"]
                ref = [(BENCHMARK_ARANY.get(m, ALAP_BENCHMARK_ARANY) * meccs_df[m].mean()) / max_val * 100 if not np.isnan(meccs_df[m].mean()) else 0 for m in selected_metrics]
                fig.add_scatterpolar(r=ref, theta=selected_metrics, name="Benchmark", line=dict(dash="dot"))
                st.plotly_chart(fig, use_container_width=True)

        st.subheader("üìà Trenddiagram ‚Äì H√©tre bontva")
        for metric in selected_metrics:
            trend_df = df[df["J√°t√©kos neve"].isin(selected_players)]
            if not trend_df.empty:
                pivot = trend_df.pivot_table(index="H√©t", columns="J√°t√©kos neve", values=metric, aggfunc="mean").reset_index()
                fig = px.line(pivot, x="H√©t", y=pivot.columns[1:], title=f"{metric} ‚Äì J√°t√©kos trend")
                cs_avg = df.groupby("H√©t")[metric].mean().reset_index()
                fig.add_scatter(x=cs_avg["H√©t"], y=cs_avg[metric], mode="lines+markers", name="Csapat√°tlag")
                meccs_df = df[df["T√≠pus"] == "Meccs"].groupby("H√©t")[metric].mean()
                benchmark_vals = [(BENCHMARK_ARANY.get(metric, ALAP_BENCHMARK_ARANY) * v) if not np.isnan(v) else None for v in meccs_df]
                fig.add_scatter(x=meccs_df.index, y=benchmark_vals, mode="lines", name="Benchmark", line=dict(dash="dot"))
                st.plotly_chart(fig, use_container_width=True)

else:
    st.info("üì• T√∂lts fel legal√°bb egy heti Excel-f√°jlt a kezd√©shez.")
