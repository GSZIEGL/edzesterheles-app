
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from io import StringIO

st.set_page_config(page_title="Edz√©sterhel√©s Dashboard", layout="wide")
st.title("üèÜ Heti edz√©sterhel√©s elemz≈ë alkalmaz√°s")

# --- Funkci√≥k ---
def load_all_sheets(file):
    excel = pd.ExcelFile(file)
    sheets = excel.sheet_names
    dfs = []
    for sheet in sheets:
        df = pd.read_excel(excel, sheet_name=sheet)
        df['Forr√°s'] = sheet
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

def preprocess(df):
    df = df.copy()
    df = df[df["J√°t√©kos neve"].notna()]
    df["Kezd√©si id≈ë"] = pd.to_datetime(df["Kezd√©si id≈ë"], errors="coerce")
    df["√Åtlagos pulzus [bpm]"] = pd.to_numeric(df["√Åtlagos pulzus [bpm]"], errors="coerce")
    df["Izomterhel√©s"] = pd.to_numeric(df["Izomterhel√©s"], errors="coerce")
    df["HRV (RMSSD)"] = pd.to_numeric(df["HRV (RMSSD)"], errors="coerce")
    df["Id≈ëtartam"] = pd.to_timedelta(df["Id≈ëtartam"], errors="coerce")
    df["Id≈ëtartam perc"] = df["Id≈ëtartam"].dt.total_seconds() / 60
    df["Edz√©s/meccs"] = df["Forr√°s"].apply(lambda x: "Meccs" if "meccs" in x.lower() else "Edz√©s")
    return df

def calculate_summary(df):
    agg = df.groupby("J√°t√©kos neve").agg({
        "√Åtlagos pulzus [bpm]": "mean",
        "Izomterhel√©s": "sum",
        "HRV (RMSSD)": "mean",
        "Id≈ëtartam perc": "sum"
    }).rename(columns={
        "√Åtlagos pulzus [bpm]": "√Åtlagos pulzus",
        "Izomterhel√©s": "√ñsszes izomterhel√©s",
        "HRV (RMSSD)": "√Åtlagos HRV",
        "Id≈ëtartam perc": "√ñssz id≈ë (perc)"
    })
    return agg.reset_index()

# --- F≈ë r√©sz ---
uploaded_file = st.file_uploader("T√∂ltsd fel az edz√©s/meccs adatokat tartalmaz√≥ Excel f√°jlt (t√∂bb munkalap megengedett)", type="xlsx")

if uploaded_file:
    df_raw = load_all_sheets(uploaded_file)
    df = preprocess(df_raw)

    st.sidebar.header("üîç Sz≈±r√©s")
    selected_players = st.sidebar.multiselect("J√°t√©kos kiv√°laszt√°sa", df["J√°t√©kos neve"].unique().tolist(), default=df["J√°t√©kos neve"].unique().tolist())
    df = df[df["J√°t√©kos neve"].isin(selected_players)]

    st.subheader("üìä J√°t√©kosok √∂sszes√≠tett statisztik√°i")
    summary_df = calculate_summary(df)
    st.dataframe(summary_df)

    st.subheader("üèãÔ∏è Izomterhel√©s - Top 10")
    top10 = summary_df.sort_values("√ñsszes izomterhel√©s", ascending=False).head(10)
    fig1 = px.bar(top10, x="J√°t√©kos neve", y="√ñsszes izomterhel√©s", title="Top 10 j√°t√©kos izomterhel√©s szerint")
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("üåê HRV trend id≈ëben")
    fig2 = px.line(df, x="Kezd√©si id≈ë", y="HRV (RMSSD)", color="J√°t√©kos neve", markers=True)
    st.plotly_chart(fig2, use_container_width=True)

else:
    st.info("K√©rlek t√∂lts fel egy Excel f√°jlt, amely tartalmazza az edz√©s/meccs adatokat.")
