
# ‚öΩ V13 ‚Äì v√©gleges, m≈±k√∂d≈ë Streamlit alkalmaz√°s

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

st.set_page_config(layout="wide")
st.title("‚öΩ Edz√©sterhel√©s ‚Äì V13")

BENCHMARK_ARANY = {
    "Teljes t√°v [m]": 2.5,
    "T√°v/perc [m/min]": 0.7,
    "T√°v z√≥na 4 [m]": 1.5,
    "T√°v z√≥na 5 [m]": 1.5,
    "Sprint sz√°m": 2.0,
    "Gyorsul√°sok sz√°ma": 1.5,
    "Lass√≠t√°sok sz√°ma": 1.5,
    "Izomterhel√©s": 2.5,
    "Edz√©sterhel√©s": 3.0,
    "Max sebess√©g [km/h]": 1.0
}

uploaded_files = st.file_uploader("üìÅ Excel f√°jl(ok) felt√∂lt√©se", type="xlsx", accept_multiple_files=True)

if uploaded_files:
    dfs = []
    for file in uploaded_files:
        xls = pd.ExcelFile(file)
        for sheet in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet)
            df["H√©t"] = sheet
            df["T√≠pus"] = "Meccs" if "meccs" in sheet.lower() else "Edz√©s"
            dfs.append(df)
    data = pd.concat(dfs, ignore_index=True)

    numeric_columns = data.select_dtypes(include=np.number).columns.tolist()
    all_players = sorted(data["J√°t√©kos neve"].dropna().unique())
    all_weeks = sorted(data["H√©t"].unique())
    metrics = [col for col in numeric_columns if col in BENCHMARK_ARANY]

    st.sidebar.header("üéõ Sz≈±r√©s")
    selected_players = st.sidebar.multiselect("J√°t√©kos(ok)", all_players, default=all_players)
    selected_weeks = st.sidebar.multiselect("H√©t(ek)", all_weeks, default=all_weeks)
    selected_metrics = st.sidebar.multiselect("Mutat√≥k", metrics, default=metrics[:3])
    tipus = st.sidebar.radio("T√≠pus", ["Mind", "Edz√©s", "Meccs"])
    pizza_mode = st.sidebar.radio("üçï Pizza n√©zet", ["√ñsszes egyben", "J√°t√©kosonk√©nt"])

    df = data[data["H√©t"].isin(selected_weeks)]
    if tipus != "Mind":
        df = df[df["T√≠pus"] == tipus]
    filtered_df = df[df["J√°t√©kos neve"].isin(selected_players)]

    st.subheader("üìä √ñsszehasonl√≠t√≥ oszlopdiagram")
    for metric in selected_metrics:
        team_avg = df[metric].mean()
        benchmark = BENCHMARK_ARANY.get(metric, 1.0) * df[df["T√≠pus"] == "Meccs"][metric].mean()
        chart_data = []
        for p in selected_players:
            p_val = df[df["J√°t√©kos neve"] == p][metric].mean()
            chart_data.append({"J√°t√©kos": p, "√ârt√©k": p_val, "T√≠pus": "J√°t√©kos"})
        chart_data.append({"J√°t√©kos": "Csapat√°tlag", "√ârt√©k": team_avg, "T√≠pus": "Csapat√°tlag"})
        chart_data.append({"J√°t√©kos": "Benchmark", "√ârt√©k": benchmark, "T√≠pus": "Benchmark"})
        fig = px.bar(pd.DataFrame(chart_data), x="J√°t√©kos", y="√ârt√©k", color="T√≠pus", barmode="group",
                     title=f"{metric} ‚Äì j√°t√©kos vs csapat vs benchmark")
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìà Trenddiagram (j√°t√©kos + csapat√°tlag + benchmark)")
    for metric in selected_metrics:
        pivot = df[df["J√°t√©kos neve"].isin(selected_players)].pivot_table(index="H√©t", columns="J√°t√©kos neve", values=metric).reset_index()
        fig = px.line(pivot, x="H√©t", y=pivot.columns[1:], markers=True, title=f"{metric} ‚Äì trend")
        team_avg = df.groupby("H√©t")[metric].mean().reset_index()
        fig.add_scatter(x=team_avg["H√©t"], y=team_avg[metric], mode="lines+markers", name="Csapat√°tlag")
        bm_series = df[df["T√≠pus"] == "Meccs"].groupby("H√©t")[metric].mean() * BENCHMARK_ARANY.get(metric, 1.0)
        fig.add_scatter(x=bm_series.index, y=bm_series.values, mode="lines", name="Benchmark", line=dict(dash="dot"))
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üçï Pizzadiagram(ok)")
    max_val = filtered_df[selected_metrics].max().max()
    if pizza_mode == "√ñsszes egyben":
        fig = px.line_polar(r=[], theta=[], line_close=True)
        for p in selected_players:
            values = filtered_df[filtered_df["J√°t√©kos neve"] == p][selected_metrics].mean()
            fig.add_scatterpolar(r=(values / max_val * 100).values, theta=values.index, fill='toself', name=p)
        team_avg = filtered_df[selected_metrics].mean()
        fig.add_scatterpolar(r=(team_avg / max_val * 100).values, theta=team_avg.index, name="Csapat√°tlag")
        meccs_df = df[df["T√≠pus"] == "Meccs"]
        benchmark_r = [(BENCHMARK_ARANY.get(m, 1.0) * meccs_df[m].mean()) / max_val * 100 for m in selected_metrics]
        fig.add_scatterpolar(r=benchmark_r, theta=selected_metrics, name="Benchmark", line=dict(dash="dot"))
        fig.update_layout(title="Pizza ‚Äì √∂sszes j√°t√©kos")
        st.plotly_chart(fig, use_container_width=True)
    else:
        for p in selected_players:
            fig = px.line_polar(r=[], theta=[], line_close=True)
            values = filtered_df[filtered_df["J√°t√©kos neve"] == p][selected_metrics].mean()
            fig.add_scatterpolar(r=(values / max_val * 100).values, theta=values.index, fill='toself', name=p)
            fig.update_layout(title=f"{p} ‚Äì pizzadiagram")
            st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìã Benchmark t√°bl√°zat")
    benchmark_table = []
    for metric in selected_metrics:
        meccs_avg = df[df["T√≠pus"] == "Meccs"][metric].mean()
        benchmark_val = BENCHMARK_ARANY.get(metric, 1.0) * meccs_avg
        benchmark_table.append({
            "Mutat√≥": metric,
            "Meccs√°tlag": round(meccs_avg, 2),
            "Benchmark szorz√≥": BENCHMARK_ARANY.get(metric, 1.0),
            "Benchmark √©rt√©k": round(benchmark_val, 2)
        })
    st.dataframe(pd.DataFrame(benchmark_table))
else:
    st.info("üìÇ T√∂lts fel legal√°bb egy heti Excel-f√°jlt t√∂bb munkalappal (edz√©sek + meccs).")
