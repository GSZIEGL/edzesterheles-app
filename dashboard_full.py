
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

st.set_page_config(page_title="Teljes edz√©sterhel√©s elemz√©s", layout="wide")
st.title("üìä Teljes edz√©sterhel√©s √©s meccsterhel√©s dashboard")

uploaded_file = st.file_uploader("üì§ Excel f√°jl felt√∂lt√©se (6 munkalappal: 5 edz√©s + 1 meccs)", type="xlsx")

@st.cache_data
def load_data(file):
    xls = pd.ExcelFile(file)
    all_dfs = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(file, sheet_name=sheet)
        df["Forr√°s"] = sheet
        all_dfs.append(df)
    return pd.concat(all_dfs, ignore_index=True)

def normalize(val, ref):
    return val / ref * 100 if ref else 0

if uploaded_file:
    df = load_data(uploaded_file)
    df = df[df["J√°t√©kos neve"].notna()].copy()

    st.sidebar.header("üéØ Sz≈±r≈ëk")
    players = df["J√°t√©kos neve"].dropna().unique().tolist()
    selected_player = st.sidebar.selectbox("J√°t√©kos kiv√°laszt√°sa", players)

    player_df = df[df["J√°t√©kos neve"] == selected_player]

    st.subheader("üìã √ñsszes√≠tett mutat√≥k (√°tlagolva)")
    numeric_cols = ["Teljes t√°v [m]", "T√°v/perc [m/perc]", "HRV (RMSSD)", "√Åtlagos pulzus [bpm]",
                    "Max sebess√©g [km/h]", "Izomterhel√©s", "Sprintek sz√°ma",
                    "Z√≥na 5 gyorsul√°s", "Z√≥na 5 lassul√°s", "Z√≥na 5-6 t√°v"]
    ref_values = {
        "Teljes t√°v [m]": 5500, "T√°v/perc [m/perc]": 100, "HRV (RMSSD)": 60, "√Åtlagos pulzus [bpm]": 160,
        "Max sebess√©g [km/h]": 30, "Izomterhel√©s": 65, "Sprintek sz√°ma": 25,
        "Z√≥na 5 gyorsul√°s": 10, "Z√≥na 5 lassul√°s": 10, "Z√≥na 5-6 t√°v": 500
    }

    available_cols = [col for col in numeric_cols if col in player_df.columns]
    player_stats = player_df[available_cols].mean()

    df_normalized = [normalize(player_stats[col], ref_values[col]) for col in available_cols]

    radar_fig = go.Figure()
    radar_fig.add_trace(go.Scatterpolar(r=df_normalized, theta=available_cols, fill='toself', name=selected_player))
    radar_fig.add_trace(go.Scatterpolar(r=[100]*len(df_normalized), theta=available_cols, fill='toself', name='Ipar√°gi √°tlag'))
    radar_fig.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, max(120, max(df_normalized))])), showlegend=True)

    st.plotly_chart(radar_fig, use_container_width=True)

    st.subheader("üìà Trend diagram: HRV √©s Pulzus alakul√°sa")
    if "Kezd√©si id≈ë" in player_df.columns:
        player_df["Kezd√©si id≈ë"] = pd.to_datetime(player_df["Kezd√©si id≈ë"], errors="coerce")
        fig = px.line(player_df.sort_values("Kezd√©si id≈ë"), x="Kezd√©si id≈ë", y=["HRV (RMSSD)", "√Åtlagos pulzus [bpm]"],
                      markers=True, labels={"value": "√ârt√©k", "Kezd√©si id≈ë": "D√°tum", "variable": "Mutat√≥"})
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üèÉ‚Äç‚ôÇÔ∏è Sebess√©g √©s sprint diagram")
    if "Sprintek sz√°ma" in player_df.columns and "Max sebess√©g [km/h]" in player_df.columns:
        sprint_fig = px.bar(player_df, x="Forr√°s", y="Sprintek sz√°ma", color="Max sebess√©g [km/h]",
                            labels={"Forr√°s": "Edz√©s/Meccs", "Sprintek sz√°ma": "Sprintek", "Max sebess√©g [km/h]": "Max seb."})
        st.plotly_chart(sprint_fig, use_container_width=True)

    st.subheader("üèÅ Izomterhel√©s √©s z√≥n√°k")
    zone_cols = [col for col in ["Z√≥na 5 gyorsul√°s", "Z√≥na 5 lassul√°s", "Z√≥na 5-6 t√°v", "Izomterhel√©s"] if col in player_df.columns]
    if zone_cols:
        zone_fig = px.bar(player_df, x="Forr√°s", y=zone_cols, barmode="group")
        st.plotly_chart(zone_fig, use_container_width=True)
else:
    st.info("T√∂lts fel egy megfelel≈ë strukt√∫r√°j√∫ Excel f√°jlt (6 munkalap: 5 edz√©s + 1 meccs).")
