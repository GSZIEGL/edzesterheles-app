
# Streamlit edz√©sterhel√©s dashboard ‚Äì √∫jratervezett, null√°r√≥l √©p√≠tett v√°ltozat
# Minden fontos mutat√≥val, sz≈±r≈ëkkel √©s benchmarkkal, t√∂bb heti adat kezel√©s√©vel

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="Edz√©sterhel√©s App", layout="wide")

st.title("‚öΩ Interakt√≠v Edz√©sterhel√©s Dashboard")

uploaded_file = st.file_uploader("üì§ T√∂lts fel egy Excel f√°jlt (t√∂bb heti edz√©ssel √©s meccsel)", type="xlsx")

@st.cache_data
def load_data(file):
    xls = pd.ExcelFile(file)
    all_dfs = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df["H√©t"] = sheet
        all_dfs.append(df)
    return pd.concat(all_dfs, ignore_index=True)

def radar_chart(df, columns, ref_dict, title):
    cols = [col for col in columns if col in df.columns]
    if not cols:
        return None
    avg_vals = df[cols].mean()
    norm_vals = [avg_vals[c]/ref_dict[c]*100 if ref_dict.get(c) else 0 for c in cols]
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(r=norm_vals, theta=cols, fill='toself', name='J√°t√©kos'))
    fig.add_trace(go.Scatterpolar(r=[100]*len(cols), theta=cols, fill='toself', name='Benchmark'))
    fig.update_layout(title=title, polar=dict(radialaxis=dict(visible=True, range=[0, max(120, max(norm_vals, default=0))])))
    return fig

if uploaded_file:
    df = load_data(uploaded_file)
    df = df[df["J√°t√©kos neve"].notna()]
    st.sidebar.header("üéØ Sz≈±r√©s")

    players = sorted(df["J√°t√©kos neve"].dropna().unique().tolist())
    types = sorted(df["T√≠pus"].dropna().unique().tolist())
    weeks = sorted(df["H√©t"].dropna().unique().tolist())
    all_metrics = [c for c in df.columns if df[c].dtype in ['int64', 'float64'] and c not in ['√âvfolyam', 'Kor']]

    selected_player = st.sidebar.selectbox("J√°t√©kos", players)
    selected_type = st.sidebar.selectbox("T√≠pus (edz√©s/meccs)", ["√ñsszes"] + types)
    selected_weeks = st.sidebar.multiselect("H√©t(ek)", weeks, default=weeks)
    selected_metrics = st.sidebar.multiselect("Mutat√≥k", all_metrics, default=all_metrics)

    filtered = df[df["J√°t√©kos neve"] == selected_player]
    if selected_type != "√ñsszes":
        filtered = filtered[filtered["T√≠pus"] == selected_type]
    filtered = filtered[filtered["H√©t"].isin(selected_weeks)]

    team_filtered = df[df["H√©t"].isin(selected_weeks)]
    if selected_type != "√ñsszes":
        team_filtered = team_filtered[team_filtered["T√≠pus"] == selected_type]

    st.header(f"üìä {selected_player} teljes√≠tm√©nye ({', '.join(selected_weeks)})")

    ref_values = {
        "Teljes t√°v [m]": 5500,
        "T√°v/perc [m/perc]": 100,
        "Max sebess√©g [km/h]": 30,
        "Sprintek sz√°ma": 25,
        "Izomterhel√©s": 65,
        "HRV (RMSSD)": 60,
        "√Åtlagos pulzus [bpm]": 160,
        "Z√≥na 5-6 t√°v": 500,
        "Z√≥na 5 gyorsul√°s": 10,
        "Z√≥na 5 lassul√°s": 10
    }

    col1, col2 = st.columns(2)
    with col1:
        fig1 = radar_chart(filtered, ["Teljes t√°v [m]", "T√°v/perc [m/perc]", "Max sebess√©g [km/h]", "Sprintek sz√°ma"], ref_values, "üï∏Ô∏è Fizikai mutat√≥k")
        if fig1: st.plotly_chart(fig1, use_container_width=True)
    with col2:
        fig2 = radar_chart(filtered, ["Izomterhel√©s", "HRV (RMSSD)", "√Åtlagos pulzus [bpm]"], ref_values, "üï∏Ô∏è Terhel√©s mutat√≥k")
        if fig2: st.plotly_chart(fig2, use_container_width=True)

    st.subheader("üìà Trendmutat√≥k (j√°t√©kos, heti bont√°sban)")
    if "H√©t" in filtered.columns:
        trend_df = filtered.groupby("H√©t")[selected_metrics].mean().reset_index()
        fig = px.line(trend_df, x="H√©t", y=selected_metrics, markers=True)
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìä Csapat√°tlag vs j√°t√©kos (v√°lasztott mutat√≥k)")
    compare_df = pd.DataFrame({
        "Mutat√≥": selected_metrics,
        "J√°t√©kos": [filtered[m].mean() if m in filtered.columns else None for m in selected_metrics],
        "Csapat": [team_filtered[m].mean() if m in team_filtered.columns else None for m in selected_metrics],
        "Benchmark": [ref_values.get(m, None) for m in selected_metrics]
    })
    fig_comp = px.bar(compare_df, x="Mutat√≥", y=["J√°t√©kos", "Csapat", "Benchmark"], barmode="group")
    st.plotly_chart(fig_comp, use_container_width=True)

    st.subheader("üìã Adatt√°bla")
    st.dataframe(filtered[selected_metrics + ["H√©t", "T√≠pus"]])
else:
    st.info("K√©rlek, t√∂lts fel egy Excel f√°jlt a haszn√°lathoz.")
