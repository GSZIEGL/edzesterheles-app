
# Ez a v√©gleges, teljes tartalm√∫ Streamlit app f√°jl ‚Äì most m√°r nem placeholder.
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="Teljes Edz√©sterhel√©s Dashboard", layout="wide")

st.title("‚öΩ Teljes edz√©sterhel√©s elemz√©s ‚Äì V√©gleges verzi√≥")

uploaded_file = st.file_uploader("üì§ T√∂lts fel egy Excel f√°jlt (5 edz√©s + 1 meccs munkalap)", type="xlsx")

@st.cache_data
def load_data(file):
    xls = pd.ExcelFile(file)
    df_list = []
    for sheet in xls.sheet_names:
        df = pd.read_excel(xls, sheet_name=sheet)
        df["Forr√°s"] = sheet
        df_list.append(df)
    return pd.concat(df_list, ignore_index=True)

def create_radar(player_df, title, ref_values, mutatok):
    avg_stats = player_df[mutatok].mean()
    norm_vals = [avg_stats[m]/ref_values[m]*100 if m in avg_stats and ref_values[m] else 0 for m in mutatok]
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(r=norm_vals, theta=mutatok, fill='toself', name='J√°t√©kos'))
    fig.add_trace(go.Scatterpolar(r=[100]*len(mutatok), theta=mutatok, fill='toself', name='Benchmark'))
    fig.update_layout(title=title, polar=dict(radialaxis=dict(visible=True, range=[0, max(120, max(norm_vals))])))
    return fig

if uploaded_file:
    df = load_data(uploaded_file)
    df = df[df["J√°t√©kos neve"].notna()]

    st.sidebar.header("üéØ Sz≈±r√©s")
    player_list = df["J√°t√©kos neve"].dropna().unique().tolist()
    selected_player = st.sidebar.selectbox("V√°lassz j√°t√©kost", player_list)
    tipus_list = df["T√≠pus"].dropna().unique().tolist()
    selected_tipus = st.sidebar.selectbox("V√°lassz t√≠pust", ["√ñsszes"] + tipus_list)

    player_df = df[df["J√°t√©kos neve"] == selected_player]
    if selected_tipus != "√ñsszes":
        player_df = player_df[player_df["T√≠pus"] == selected_tipus]

    st.header(f"üìå Elemz√©s ‚Äì {selected_player}")
    ref_values = {
        "Teljes t√°v [m]": 5500,
        "T√°v/perc [m/perc]": 100,
        "Max sebess√©g [km/h]": 30,
        "Sprintek sz√°ma": 25,
        "Izomterhel√©s": 65,
        "HRV (RMSSD)": 60,
        "√Åtlagos pulzus [bpm]": 160
    }

    mutatok_1 = ["Teljes t√°v [m]", "T√°v/perc [m/perc]", "Max sebess√©g [km/h]", "Sprintek sz√°ma"]
    mutatok_2 = ["Izomterhel√©s", "HRV (RMSSD)", "√Åtlagos pulzus [bpm]"]

    st.subheader("üï∏Ô∏è P√≥kh√°l√≥ ‚Äì Fizikai mutat√≥k")
    st.plotly_chart(create_radar(player_df, "Fizikai teljes√≠tm√©ny", ref_values, mutatok_1), use_container_width=True)

    st.subheader("üï∏Ô∏è P√≥kh√°l√≥ ‚Äì Terhel√©s mutat√≥k")
    st.plotly_chart(create_radar(player_df, "Terhel√©s √©s regener√°ci√≥", ref_values, mutatok_2), use_container_width=True)

    if "Sprintek sz√°ma" in player_df.columns:
        st.subheader("üèÉ‚Äç‚ôÇÔ∏è Sprintek sz√°ma edz√©senk√©nt")
        sprint_fig = px.bar(player_df, x="Forr√°s", y="Sprintek sz√°ma", title="Sprintek sz√°ma")
        st.plotly_chart(sprint_fig, use_container_width=True)

    if "Izomterhel√©s" in df.columns:
        st.subheader("üèÜ Top10 j√°t√©kos ‚Äì Izomterhel√©s (√°tlag)")
        top_df = df.groupby("J√°t√©kos neve")["Izomterhel√©s"].mean().sort_values(ascending=False).head(10).reset_index()
        top_fig = px.bar(top_df, x="Izomterhel√©s", y="J√°t√©kos neve", orientation="h")
        st.plotly_chart(top_fig, use_container_width=True)
else:
    st.info("K√©rlek, t√∂lts fel egy 6 munkalapos Excel f√°jlt (5 edz√©s, 1 meccs).")
